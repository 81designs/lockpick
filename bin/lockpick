#!/usr/bin/env ruby
#
# Pulls the public keys from the members of one or more team on GitHub and
# populates the ~/.ssh/authorized_keys for the user running the script.
#
# Motivation
# ----------
#
# We sometimes get new people at the dojo. We sometimes lose people at the dojo.
# The goal of this gem is to make it easy to grant and remove access to and from
# our servers...

require 'main'
require 'yaml'
require 'digest'
require 'map'

Main {
  config({
    'github' => {
      'token' => ENV['GITHUB_TOKEN'],
      'org' => ENV['GITHUB_TEAM'],
      'team_ids' => %w(  )
      },
    'default_keys' => %w( )
  })

  def run
    status = lock_file.flock(File::LOCK_EX|File::LOCK_NB)
    exit(42) unless status == 0

    pull_ssh_keys!
  end

  def pull_ssh_keys!
    ssh_keys = config.github.team_ids.map do |team_id|
      team_members(team_id).map do |member|
        { member.login => keys_for_member(member.login) }
      end
    end.flatten

    FileUtils.mkdir_p(File.join(ENV['HOME'], '.ssh'))

    File.atomic_write(File.join(ENV['HOME'], '.ssh', 'authorized_keys')) do |f|

      f.puts("# Default Keys -----------------------")
      config.default_keys.each do |key|
        f.puts(key)
      end
      f.puts("# End Default Keys -------------------")
      ssh_keys.each do |user_keys|
        user_keys.each do |login, keys|
          f.puts("# Start Public Key for #{login} ---------------- ")
          keys.each do |key|
            f.puts("#{key['key']} #{key.title}")
          end
          f.puts("# End Public Key for #{login} ----------------- ")
        end
      end
    end
  end

  def team_members(team_id)
    github.orgs.with(org_name: config.github.org).teams.list_members(team_id: team_id).response.body
  end

  def keys_for_member(login)
    github.users.keys.list(user: login).response.body
  end

  def lock_file
    @lock_file ||= File.open(File.join(state_path, ".lock"), 'w')
  end

  mode(:shell) {
    def run
      require 'pry'
      Pry.hooks[:before_session] = proc{}
      prompt = "lockpick >> "
      Pry.config.prompt = proc{ |*a| prompt }
      binding.pry
    end
  }
}


BEGIN {
  require 'rubygems'
  require 'github_api'
  require 'map'
  require 'tempfile'

  def github
    @github ||= Github.new oauth_token: config.github.token
  end

  class File
    # Write to a file atomically. Useful for situations where you don't
    # want other processes or threads to see half-written files.
    #
    #   File.atomic_write('important.file') do |file|
    #     file.write('hello')
    #   end
    #
    # If your temp directory is not on the same filesystem as the file you're
    # trying to write, you can provide a different temporary directory.
    #
    #   File.atomic_write('/data/something.important', '/data/tmp') do |file|
    #     file.write('hello')
    #   end
    def self.atomic_write(file_name, temp_dir = Dir.tmpdir)
      require 'tempfile' unless defined?(Tempfile)
      require 'fileutils' unless defined?(FileUtils)

      temp_file = Tempfile.new(basename(file_name), temp_dir)
      temp_file.binmode
      yield temp_file
      temp_file.close

      if File.exists?(file_name)
        # Get original file permissions
        old_stat = stat(file_name)
      else
        # If not possible, probe which are the default permissions in the
        # destination directory.
        old_stat = probe_stat_in(dirname(file_name))
      end

      # Overwrite original file with temp file
      FileUtils.mv(temp_file.path, file_name)

      # Set correct permissions on new file
      begin
        chown(old_stat.uid, old_stat.gid, file_name)
        # This operation will affect filesystem ACL's
        chmod(old_stat.mode, file_name)
      rescue Errno::EPERM
        # Changing file ownership failed, moving on.
      end
    end

    # Private utility method.
    def self.probe_stat_in(dir) #:nodoc:
      basename = [
        '.permissions_check',
        Thread.current.object_id,
        Process.pid,
        rand(1000000)
    ].join('.')

      file_name = join(dir, basename)
      FileUtils.touch(file_name)
      stat(file_name)
    ensure
      FileUtils.rm_f(file_name) if file_name
    end
  end
}

END {
  lock_file.close
}

__END__
### We need something to lock on...
